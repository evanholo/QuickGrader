# Defines global settings for Nginx worker processes.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    # This number should be configured based on your server's resources and expected load.
    worker_connections 1024; # A common default, can be increased if needed.
}

# Defines the settings for HTTP request processing.
http {
    # Defines a group of servers for the backend FastAPI application.
    # 'backend' is the name we'll use to refer to this group.
    upstream backend {
        # 'backend:8000' refers to the Docker service name 'backend' (defined in your docker-compose.yml)
        # and the port it's listening on within the Docker network.
        server backend:8000; # Points to your FastAPI application container.
    }

    # Defines a group of servers for the frontend Vue.js application (which is itself served by an Nginx container).
    # 'frontend' is the name we'll use to refer to this group.
    upstream frontend {
        # 'frontend:80' refers to the Docker service name 'frontend'
        # and the port its internal Nginx server is listening on.
        server frontend:80; # Points to your Vue.js Nginx container.
    }

    # Defines a virtual server to handle incoming HTTP requests.
    server {
        # Instructs Nginx to listen for incoming connections on port 80 (standard HTTP).
        listen 80;

        # Defines how to process requests that match the root path ('/') and any other paths
        # not specifically matched by other location blocks. This will primarily serve your Vue.js frontend.
        location / {
            # Passes the request to the 'frontend' upstream group defined above.
            proxy_pass http://frontend;

            # Preserves the original Host header from the client's request.
            # This is important for the frontend application to know the requested domain.
            proxy_set_header Host $host;

            # Passes the real IP address of the client to the upstream server.
            # Useful for logging or IP-based access restrictions in the frontend service if needed.
            proxy_set_header X-Real-IP $remote_addr;

            # Passes a list of IP addresses, including the client and any intermediate proxies.
            # $proxy_add_x_forwarded_for appends the $remote_addr to any existing X-Forwarded-For header.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Informs the upstream server about the original protocol (http or https) used by the client.
            # $scheme is automatically set by Nginx based on the incoming connection.
            # Crucial if Nginx itself handles SSL termination, or if an upstream load balancer does.
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Defines how to process requests that start with '/api/'.
        # This will route requests to your FastAPI backend application.
        location /api/ { # Added a trailing slash here for consistency, see note below.
            # Passes the request to the 'backend' upstream group defined above.
            # Note: If your backend routes are like '/users' (not '/api/users'),
            # you might need to rewrite the path here, e.g., by adding a trailing slash
            # to proxy_pass: `proxy_pass http://backend/;` and ensuring the location is `/api/`.
            # With `proxy_pass http://backend;` and `location /api/`, a request to `/api/users`
            # will be sent to the backend as `/api/users`. This is often desired.
            proxy_pass http://backend;

            # Preserves the original Host header from the client's request for the backend.
            proxy_set_header Host $host;

            # Passes the real IP address of the client to the backend server.
            proxy_set_header X-Real-IP $remote_addr;

            # Passes the chain of IP addresses to the backend server.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Informs the backend server about the original protocol used by the client.
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Optional: You might want to add settings for handling client request body size, timeouts, etc.
        # client_max_body_size 100M; # Example: allow larger file uploads
        # proxy_connect_timeout 60s;
        # proxy_send_timeout 60s;
        # proxy_read_timeout 60s;

        # Optional: If you want to serve static assets (like images, css, js directly from this Nginx
        # for some reason, or have a health check endpoint, you could add more location blocks)
        # location /health {
        #     return 200 "OK";
        #     add_header Content-Type text/plain;
        # }
    }

    # Optional: You can include other http block configurations here, like gzip compression,
    # logging formats, etc.
    # gzip on;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # access_log /var/log/nginx/access.log;
    # error_log /var/log/nginx/error.log;
}